M2R - Call for devs
===================
:author:    Robert Pankowecki
:copyright: Robert Pankowecki
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:language: ruby
:pygments:


== Robert Pankowecki ???

image:/home/rupert/Dropbox/drug/wroclawrb/logos/drug-logo-name-rect-sq.png[]
image:/home/rupert/Dropbox/drug/wroclawrb/krasnal.png[]
image:/home/rupert/Dropbox/drug/arkency.png[]
image:/home/rupert/Dropbox/Photos/rupert_outside_bw.jpg[]

* github:  @paneq
* twitter: @pankowecki
* gtalk:   robert.pankowecki
* cv:      robert.pankowecki.pl
* blog:    blog.robert.pankowecki.pl
* company: rails.arkency.com
* conference: wrocloverb.com

== Mongrel2

* webserver
* http 1.1
* flash json sockets
* flash xml sockets
* websockets (implemented unreleased 1.8)
* language agnostic

== Async

Other servers assume that every request is received by a browser, then sent to a backend, and then directly sent out to the client and that’s it. Mongrel2 assumes that there is a connected client, and it sends requests to backends, but it makes no assumptions about how those backends respond to the clients. All it requires is that the backend application send messages addressed to the client and it will write them on the socket.

Because of this design, Mongrel2 can easily house both classic HTTP clients, keep-alive style HTTP client, chunked encoding responses, JSSockets, or WebSockets using the same code.

* out of request-replay ghetto

== N:M

* target up to 128 connection with 1 message
* Mongrel2 is the only web server capable of sending one request from a browser to N backends at once, and then return the replies from these handlers to M browsers. Not exactly sure what you could write with that, but it’s probably something really damn cool

== Async uploads

* Request body saved as file
* notification when upload started and when finished
* Easy way for measuring upload progress

== Handler for every language

* Mongrel2 <- (zmq/json) -> Handler (M2R)
* Handler <- (ruby) -> Rack
* Rack <- (ruby) -> Rails

=== Rack

* standard

=== Webmachine

* gem

== Current status

* $@%$#%@!

== Bright future

* SRP / Clean code
* Streaming support (SSE)
* Multithreading (JRuby !)
* M2R > Puma - why?
* Dynamic threads allocation (+/- depending on signal?)

== My motivations

* Client side notifications are too complicated
* Stack full of different technologies
  ** EventMachine
  ** Pusher
  ** ...
* I can deal with it, but i do not want to
* Beginners probably won't
* Dream: Mongrel2 + M2R + Rails + SSE
* Build higher level notifications library on top of that

== Why not any other mongrel 2 gem ?

* Unmaintained
* lack of features
* Or ugly

=== Mongrel2-ruby

* up to date with everything, even unreleased mongrel2 1.8
* not use ffi-rzmq (JRuby)
* no threads
* too much code
* ugly
* should be like 10 gems

=== DRUG quality of code

== Call for action:

=== Read:

* http://mongrel2.org/features/
* http://mongrel2.org/static/mongrel2-manual.html (especially Chapter 5: Hacking)
* http://zguide.zeromq.org/page:all (At least chapters 1 and 2)
* https://github.com/perplexes/m2r/issues
* http://rack.rubyforge.org/doc/SPEC.html
* https://github.com/rack/rack/tree/master/lib/rack/handler

=== Watch:

* https://github.com/perplexes/m2r

=== Join:

* IRC: #drug.pl on freenode

=== Maybe:

* https://github.com/ged/ruby-mongrel2
* https://github.com/khiltd/khi-rack-mongrel2
* http://github.com/darkhelmet/rack-mongrel2
* http://www.w3.org/Protocols/rfc2616/rfc2616.html
* https://github.com/rfk/m2wsgi/
